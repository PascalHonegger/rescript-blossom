/**
  MIT License

  Copyright (c) 2020 John Jackson

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 */
module IntData = {
  let large = [
    (0, 1, 37.333333333333336),
    (0, 2, 52.),
    (0, 3, 41.33333333333333),
    (0, 4, 12.),
    (0, 5, 12.),
    (0, 6, 56.),
    (0, 8, 40.),
    (0, 9, 40.),
    (0, 10, 37.333333333333336),
    (0, 11, 12.),
    (0, 12, 40.),
    (0, 13, 24.),
    (0, 14, 38.4),
    (0, 15, 42.666666666666664),
    (0, 16, 50.66666666666667),
    (0, 17, 42.4),
    (1, 2, 41.33333333333333),
    (1, 3, 60.),
    (1, 4, 12.),
    (1, 5, 44.),
    (1, 6, 41.33333333333333),
    (1, 7, 42.4),
    (1, 8, 8.),
    (1, 9, 12.),
    (1, 10, 48.),
    (1, 11, 44.),
    (1, 12, 40.),
    (1, 13, 5.333333333333333),
    (1, 14, 10.666666666666666),
    (1, 15, 38.4),
    (1, 16, 37.333333333333336),
    (1, 17, 46.666666666666664),
    (2, 3, 37.333333333333336),
    (2, 4, 8.),
    (2, 5, 40.),
    (2, 6, 56.),
    (2, 7, 10.666666666666666),
    (2, 8, 44.),
    (2, 9, 36.),
    (2, 10, 41.33333333333333),
    (2, 11, 40.),
    (2, 12, 12.),
    (2, 13, 56.),
    (2, 14, 42.4),
    (2, 15, 14.666666666666666),
    (2, 16, 56.),
    (2, 17, 6.4),
    (3, 4, 40.),
    (3, 5, 40.),
    (3, 6, 5.333333333333333),
    (3, 7, 38.4),
    (3, 8, 12.),
    (3, 9, 40.),
    (3, 10, 56.),
    (3, 11, 40.),
    (3, 12, 44.),
    (3, 13, 41.33333333333333),
    (3, 14, 14.666666666666666),
    (3, 15, 42.4),
    (3, 16, 9.333333333333332),
    (3, 17, 42.666666666666664),
    (4, 5, 48.),
    (4, 6, 40.),
    (4, 7, 42.666666666666664),
    (4, 8, 54.66666666666667),
    (4, 9, 37.333333333333336),
    (4, 10, 12.),
    (4, 11, 52.),
    (4, 12, 60.),
    (4, 13, 44.),
    (4, 14, 46.666666666666664),
    (4, 15, 46.666666666666664),
    (4, 16, 44.),
    (4, 17, 42.666666666666664),
    (5, 6, 40.),
    (5, 7, 42.666666666666664),
    (5, 8, 24.),
    (5, 9, 37.333333333333336),
    (5, 10, 12.),
    (5, 11, 56.),
    (5, 12, 24.),
    (5, 13, 44.),
    (5, 14, 46.666666666666664),
    (5, 15, 46.666666666666664),
    (5, 16, 12.),
    (5, 17, 42.666666666666664),
    (6, 7, 42.666666666666664),
    (6, 8, 12.),
    (6, 9, 36.),
    (6, 10, 41.33333333333333),
    (6, 11, 40.),
    (6, 12, 12.),
    (6, 13, 52.),
    (6, 14, 42.4),
    (6, 15, 14.666666666666666),
    (6, 16, 52.),
    (6, 17, 38.4),
    (7, 8, 46.666666666666664),
    (7, 9, 4.571428571428571),
    (7, 10, 42.4),
    (7, 11, 42.666666666666664),
    (7, 12, 46.666666666666664),
    (7, 13, 14.666666666666666),
    (7, 14, 44.),
    (7, 15, 28.),
    (7, 16, 14.666666666666666),
    (7, 17, 40.),
    (8, 9, 41.33333333333333),
    (8, 10, 40.),
    (8, 11, 20.),
    (8, 12, 48.),
    (8, 13, 40.),
    (8, 14, 42.666666666666664),
    (8, 15, 42.666666666666664),
    (8, 16, 40.),
    (8, 17, 46.666666666666664),
    (9, 10, 44.),
    (9, 11, 5.333333333333333),
    (9, 12, 41.33333333333333),
    (9, 13, 40.),
    (9, 14, 42.4),
    (9, 15, 40.57142857142857),
    (9, 16, 40.),
    (9, 17, 6.4),
    (10, 11, 12.),
    (10, 12, 40.),
    (10, 13, 5.333333333333333),
    (10, 14, 42.666666666666664),
    (10, 15, 38.4),
    (10, 16, 37.333333333333336),
    (10, 17, 14.666666666666666),
    (11, 12, 52.),
    (11, 13, 44.),
    (11, 14, 46.666666666666664),
    (11, 15, 46.666666666666664),
    (11, 16, 44.),
    (11, 17, 42.666666666666664),
    (12, 13, 40.),
    (12, 14, 10.666666666666666),
    (12, 15, 42.666666666666664),
    (12, 16, 40.),
    (12, 17, 46.666666666666664),
    (13, 14, 38.4),
    (13, 15, 42.666666666666664),
    (13, 16, 48.),
    (13, 17, 42.4),
    (14, 15, 40.),
    (14, 16, 38.4),
    (14, 17, 28.),
    (15, 16, 10.666666666666666),
    (15, 17, 44.),
    (16, 17, 42.4),
  ];

  let nastyCase = [
    (1, 2, 45.),
    (1, 7, 45.),
    (2, 3, 50.),
    (3, 4, 45.),
    (4, 5, 95.),
    (4, 6, 94.),
    (5, 6, 94.),
    (6, 7, 50.),
    (1, 8, 30.),
    (3, 11, 35.),
    (5, 9, 36.),
    (7, 10, 26.),
    (11, 12, 5.),
  ];

  let data = [
    [
      (1, 2, 45.),
      (1, 5, 45.),
      (2, 3, 50.),
      (3, 4, 45.),
      (4, 5, 50.),
      (1, 6, 30.),
      (3, 9, 35.),
      (4, 8, 35.),
      (5, 7, 26.),
      (9, 10, 5.),
    ],
    [
      (1, 2, 45.),
      (1, 5, 45.),
      (2, 3, 50.),
      (3, 4, 45.),
      (4, 5, 50.),
      (1, 6, 30.),
      (3, 9, 35.),
      (4, 8, 26.),
      (5, 7, 40.),
      (9, 10, 5.),
    ],
    [
      (1, 2, 45.),
      (1, 5, 45.),
      (2, 3, 50.),
      (3, 4, 45.),
      (4, 5, 50.),
      (1, 6, 30.),
      (3, 9, 35.),
      (4, 8, 28.),
      (5, 7, 26.),
      (9, 10, 5.),
    ],
    [
      (1, 2, 40.),
      (1, 3, 40.),
      (2, 3, 60.),
      (2, 4, 55.),
      (3, 5, 55.),
      (4, 5, 50.),
      (1, 8, 15.),
      (5, 7, 30.),
      (7, 6, 10.),
      (8, 10, 10.),
      (4, 9, 30.),
    ],
    nastyCase,
    large,
  ];
};
module StringData = {
  let large = [
    ("a", "b", 37.333333333333336),
    ("a", "c", 52.),
    ("a", "d", 41.33333333333333),
    ("a", "e", 12.),
    ("a", "f", 12.),
    ("a", "g", 56.),
    ("a", "i", 40.),
    ("a", "j", 40.),
    ("a", "k", 37.333333333333336),
    ("a", "l", 12.),
    ("a", "m", 40.),
    ("a", "n", 24.),
    ("a", "o", 38.4),
    ("a", "p", 42.666666666666664),
    ("a", "q", 50.66666666666667),
    ("a", "r", 42.4),
    ("b", "c", 41.33333333333333),
    ("b", "d", 60.),
    ("b", "e", 12.),
    ("b", "f", 44.),
    ("b", "g", 41.33333333333333),
    ("b", "h", 42.4),
    ("b", "i", 8.),
    ("b", "j", 12.),
    ("b", "k", 48.),
    ("b", "l", 44.),
    ("b", "m", 40.),
    ("b", "n", 5.333333333333333),
    ("b", "o", 10.666666666666666),
    ("b", "p", 38.4),
    ("b", "q", 37.333333333333336),
    ("b", "r", 46.666666666666664),
    ("c", "d", 37.333333333333336),
    ("c", "e", 8.),
    ("c", "f", 40.),
    ("c", "g", 56.),
    ("c", "h", 10.666666666666666),
    ("c", "i", 44.),
    ("c", "j", 36.),
    ("c", "k", 41.33333333333333),
    ("c", "l", 40.),
    ("c", "m", 12.),
    ("c", "n", 56.),
    ("c", "o", 42.4),
    ("c", "p", 14.666666666666666),
    ("c", "q", 56.),
    ("c", "r", 6.4),
    ("d", "e", 40.),
    ("d", "f", 40.),
    ("d", "g", 5.333333333333333),
    ("d", "h", 38.4),
    ("d", "i", 12.),
    ("d", "j", 40.),
    ("d", "k", 56.),
    ("d", "l", 40.),
    ("d", "m", 44.),
    ("d", "n", 41.33333333333333),
    ("d", "o", 14.666666666666666),
    ("d", "p", 42.4),
    ("d", "q", 9.333333333333332),
    ("d", "r", 42.666666666666664),
    ("e", "f", 48.),
    ("e", "g", 40.),
    ("e", "h", 42.666666666666664),
    ("e", "i", 54.66666666666667),
    ("e", "j", 37.333333333333336),
    ("e", "k", 12.),
    ("e", "l", 52.),
    ("e", "m", 60.),
    ("e", "n", 44.),
    ("e", "o", 46.666666666666664),
    ("e", "p", 46.666666666666664),
    ("e", "q", 44.),
    ("e", "r", 42.666666666666664),
    ("f", "g", 40.),
    ("f", "h", 42.666666666666664),
    ("f", "i", 24.),
    ("f", "j", 37.333333333333336),
    ("f", "k", 12.),
    ("f", "l", 56.),
    ("f", "m", 24.),
    ("f", "n", 44.),
    ("f", "o", 46.666666666666664),
    ("f", "p", 46.666666666666664),
    ("f", "q", 12.),
    ("f", "r", 42.666666666666664),
    ("g", "h", 42.666666666666664),
    ("g", "i", 12.),
    ("g", "j", 36.),
    ("g", "k", 41.33333333333333),
    ("g", "l", 40.),
    ("g", "m", 12.),
    ("g", "n", 52.),
    ("g", "o", 42.4),
    ("g", "p", 14.666666666666666),
    ("g", "q", 52.),
    ("g", "r", 38.4),
    ("h", "i", 46.666666666666664),
    ("h", "j", 4.571428571428571),
    ("h", "k", 42.4),
    ("h", "l", 42.666666666666664),
    ("h", "m", 46.666666666666664),
    ("h", "n", 14.666666666666666),
    ("h", "o", 44.),
    ("h", "p", 28.),
    ("h", "q", 14.666666666666666),
    ("h", "r", 40.),
    ("i", "j", 41.33333333333333),
    ("i", "k", 40.),
    ("i", "l", 20.),
    ("i", "m", 48.),
    ("i", "n", 40.),
    ("i", "o", 42.666666666666664),
    ("i", "p", 42.666666666666664),
    ("i", "q", 40.),
    ("i", "r", 46.666666666666664),
    ("j", "k", 44.),
    ("j", "l", 5.333333333333333),
    ("j", "m", 41.33333333333333),
    ("j", "n", 40.),
    ("j", "o", 42.4),
    ("j", "p", 40.57142857142857),
    ("j", "q", 40.),
    ("j", "r", 6.4),
    ("k", "l", 12.),
    ("k", "m", 40.),
    ("k", "n", 5.333333333333333),
    ("k", "o", 42.666666666666664),
    ("k", "p", 38.4),
    ("k", "q", 37.333333333333336),
    ("k", "r", 14.666666666666666),
    ("l", "m", 52.),
    ("l", "n", 44.),
    ("l", "o", 46.666666666666664),
    ("l", "p", 46.666666666666664),
    ("l", "q", 44.),
    ("l", "r", 42.666666666666664),
    ("m", "n", 40.),
    ("m", "o", 10.666666666666666),
    ("m", "p", 42.666666666666664),
    ("m", "q", 40.),
    ("m", "r", 46.666666666666664),
    ("n", "o", 38.4),
    ("n", "p", 42.666666666666664),
    ("n", "q", 48.),
    ("n", "r", 42.4),
    ("o", "p", 40.),
    ("o", "q", 38.4),
    ("o", "r", 28.),
    ("p", "q", 10.666666666666666),
    ("p", "r", 44.),
    ("q", "r", 42.4),
  ];

  let nastyCase = [
    ("b", "c", 45.),
    ("b", "h", 45.),
    ("c", "d", 50.),
    ("d", "e", 45.),
    ("e", "f", 95.),
    ("e", "g", 94.),
    ("f", "g", 94.),
    ("g", "h", 50.),
    ("b", "i", 30.),
    ("d", "l", 35.),
    ("f", "j", 36.),
    ("h", "k", 26.),
    ("l", "m", 5.),
  ];

  let data = [
    [
      ("b", "c", 45.),
      ("b", "f", 45.),
      ("c", "d", 50.),
      ("d", "e", 45.),
      ("e", "f", 50.),
      ("b", "g", 30.),
      ("d", "j", 35.),
      ("e", "i", 35.),
      ("f", "h", 26.),
      ("j", "k", 5.),
    ],
    [
      ("b", "c", 45.),
      ("b", "f", 45.),
      ("c", "d", 50.),
      ("d", "e", 45.),
      ("e", "f", 50.),
      ("b", "g", 30.),
      ("d", "j", 35.),
      ("e", "i", 26.),
      ("f", "h", 40.),
      ("j", "k", 5.),
    ],
    [
      ("b", "c", 45.),
      ("b", "f", 45.),
      ("c", "d", 50.),
      ("d", "e", 45.),
      ("e", "f", 50.),
      ("b", "g", 30.),
      ("d", "j", 35.),
      ("e", "i", 28.),
      ("f", "h", 26.),
      ("j", "k", 5.),
    ],
    [
      ("b", "c", 40.),
      ("b", "d", 40.),
      ("c", "d", 60.),
      ("c", "e", 55.),
      ("d", "f", 55.),
      ("e", "f", 50.),
      ("b", "i", 15.),
      ("f", "h", 30.),
      ("h", "g", 10.),
      ("i", "k", 10.),
      ("e", "j", 30.),
    ],
    nastyCase,
    large,
  ];
};
let default = () =>
  Belt.List.forEachU(IntData.data, (. data) => Match.Int.make(data));
